#!/usr/bin/bash

abspath() {
  if [[ -d "$1" ]]
  then
    pushd "$1" >/dev/null
    pwd
    popd >/dev/null
  elif [[ -e $1 ]]
  then
    pushd "$(dirname "$1")" >/dev/null
    echo "$(pwd)/$(basename "$1")"
    popd >/dev/null
  else
    echo "$1" does not exist! >&2
    return 127
  fi
}

FILE=$(abspath $(readlink -f $0))
ROOT=$(abspath "$(dirname $FILE)/..")

if ! groups $(whoami) | grep &>/dev/null docker; then
  echo "User is not on the 'docker' group, this is necessary to run docker without root."
  exit 1
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    build)
      set -e

      docker build -t workstation_base:latest --build-arg USER=$(whoami) $ROOT/deploy/base
      docker build -t workstation_vscode:latest --build-arg USER=$(whoami) $ROOT/deploy/vscode
      docker build -t workstation_javascript:latest --build-arg USER=$(whoami) $ROOT/deploy/javascript
      docker build -t workstation_rust:latest --build-arg USER=$(whoami) $ROOT/deploy/rust
      docker build -t workstation_postgresql:latest --build-arg USER=$(whoami) $ROOT/deploy/postgresql
      docker build -t workstation_redis:latest --build-arg USER=$(whoami) $ROOT/deploy/redis

      shift;
      ;;
    shell)
      shift;

      if ! docker network ls | grep workstation_default &>/dev/null; then
        echo "Docker network is not running, did you remember to run 'workstation build'?"
        exit 1
      fi

      if [ -d "$2" ]; then
        DIR=$(abspath "$2")
      else
        DIR=$(pwd)
      fi

      docker run --env-file $ROOT/deploy/env \
        -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/.gitconfig:$HOME/.gitconfig \
        -v $HOME/.ssh:$HOME/.ssh \
        --network=workstation_default -v "$DIR:/src" \
        -it workstation_$1:latest
      shift; shift;
      ;;
    up)
      set -e

      shift;

      docker-compose -p workstation -f $ROOT/deploy/docker-compose.yml up --build $@
      ;;
    *)
      echo "Unknown argument [$key]. Aborting."
      exit 1
      ;;
  esac
done
